import asyncio
import logging
import threading
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from redis_client import redis_client # <<< 1. Import redis_client

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot_service")

# L·∫•y token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    token = f"TOKEN-{user_id}"
    
    # <<< 2. S·ª≠a logic: L∆∞u token v√†o Redis thay v√¨ dictionary >>>
    # D√πng token l√†m key, user_id (chat_id) l√†m value
    # ex=600 nghƒ©a l√† token s·∫Ω t·ª± ƒë·ªông h·∫øt h·∫°n sau 600 gi√¢y (10 ph√∫t)
    redis_client.set(token, user_id, ex=600)
    
    await update.message.reply_text(
        f"Xin ch√†o {update.effective_user.first_name}!\n"
        f"üîë Token c·ªßa b·∫°n l√†: {token}\n"
        f"Token n√†y c√≥ hi·ªáu l·ª±c trong 10 ph√∫t."
    )

def run_bot():
    logger.info("‚ñ∂Ô∏è Telegram bot thread started")
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))

    async def main():
        await app.initialize()
        await app.start()
        logger.info("üöÄ Telegram bot service started")
        await app.updater.start_polling()
        await asyncio.Event().wait()  # gi·ªØ loop ch·∫°y v√¥ h·∫°n

    loop.run_until_complete(main())

def start_bot_in_thread():
    t = threading.Thread(target=run_bot, daemon=True)
    t.start()